name: Kafka
category: cloud
description: Kafka是一个分布式系统，由通过高性能TCP网络协议进行通信的服务器和客户端组成。它可以部署在本地和云环境中的裸机硬件、虚拟机和容器上。
environment: |
  本应用以容器镜像的方式供用户使用，运行于预置docker的Linux环境。Docker的推荐安装方式如下：
  ## apt安装
  ### 1.更新系统软件包依赖
  ```
  sudo spt update
  sudo apt install ca-certificates curl gnupg lsb-release
  ```
  ### 2.添加Docker官方GPG密钥
  ```
  sudo mkdir -p /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  sudo chmod a+r /etc/apt/keyrings/docker.gpg
  ```
  ### 3.添加Docker官方APT源
  ```
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  ```
  ### 4.再次更新软件包索引
  ```
  sudo apt update
  ```
  ### 5.安装Docker
  ```
  sudo apt install docker-ce docker-ce-cli containerd.io
  ```

  ## yum安装
  ### 1.安装yum-utils
  ```
  sudo yum install -y yum-utils
  ```
  ### 2.添加Docker源
  ```
  sudo yum-config-manager \
  > --add-repo \
  > https://download.docker.com/linux/centos/docker-ce.repo
  ```
  ### 3.安装Docker
  ```
  sudo yum install -y docker-ce docker-ce-cli containerd.io
  ```

  注意，在openEuler环境安装docker时，可执行如下命令一键安装
  ```
  yum install -y docker
  ```

  ## 脚本安装
  ### 1.下载安装脚本
  ```
  curl -fsSL https://get.docker.com -o get-docker.sh
  ```
  ### 2.使用root权限执行脚本
  ```
  sudo sh get-docker.sh
  ```
  使用脚本安装方式时，如果用户要指定安装的docker版本，需要自行修改`get-docker.sh`的源码内容。

  ## 验证
  ```
  sudo docker run hello-world
  ```

download: |
  获取容器镜像
  ```
  docker pull openeuler/kafka:{TAG}
  ```

install: |
  启动容器
  ```
  docker run -d --name kafka -p 9092:9092 openeuler/kafka:{TAG}
  ```
    用户可根据自身需求，自定义启动选项。

license: Apache-2.0 license
similar_packages:
  - Apache Pulsar: 一个高性能的分布式消息队列和流处理平台，提供持久化消息存储、多租户支持、可扩展性和可靠性等功能。
  - RabbitMQ: 一个开源的消息代理和队列系统，支持多种消息协议，包括AMQP、MQTT、STOMP 等。RabbitMQ提供可靠的消息传递和高度可扩展性。
  - Apache ActiveMQ: 一个基于Java的消息队列和消息总线系统，支持多种消息协议，包括AMQP、STOMP、OpenWire等。它提供持久化消息存储和高可用性特性。
  - Apache RocketMQ: 一个分布式消息和流处理平台，具有高吞吐量和低延迟的特点。它支持消息的顺序传递和可靠的消息传递。
  - AWS Kinesis: 亚马逊云服务中的流处理平台，用于收集、处理和分析实时数据流。它提供了可扩展的消息传递和数据处理能力。
  - Apache Samza: 一个分布式流处理框架，用于实时处理和分析数据流。它与Apache Kafka集成紧密，可以直接从Kafka获取数据进行处理。。
dependency:
  - openjdk
